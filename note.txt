const createProduct = async (req: Request, res: Response) => {
  const productId = uuidv4();
  const colorId = uuidv4();
  const sizeId = uuidv4();
  const { name, amount, image, modelImage, currentPrice, color, symbol, measure } = req.body;

  if (!name || !amount || !image || !modelImage || !currentPrice || !color) {
    return res.status(400).send({
      message: 'Invalid data!',
    });
  }

  const existProduct = await prisma.product.findFirst({
    where: {
      name,
    },
  });

  if (existProduct) {
    return res.status(400).send({
      message: 'This product already exist',
    });
  }

  const existColorInProduct = await prisma.product.findFirst({
    where: {
      name,
      AND: {
        colors: {
          some: {
            color: {
              name: color,
            },
          },
        },
      },
    },
  });

  if (existColorInProduct) {
    return res.status(400).send({
      message: 'This color already exist',
    });
  }

  const existSizeInProduct = await prisma.product.findFirst({
    where: {
      name,
      AND: {
        sizes: {
          some: {
            size: {
              measure,
            },
            OR: {
              size: {
                symbol,
              },
            },
          },
        },
      },
    },
  });

  if (existSizeInProduct) {
    return res.status(400).send({
      message: 'This size already exist',
    });
  }

  await prisma.product.create({
    data: {
      id: productId,
      name,
      amount,
      image,
      modelImage,
      slug: slugify(name),
      currentPrice,
      colors: {
        create: {
          color: {
            create: {
              id: colorId,
              name: color,
            },
          },
        },
      },
      sizes: {
        create: {
          size: {
            create: {
              id: sizeId,
              symbol,
              measure,
            },
          },
        },
      },
    },
  });

  res.send({
    message: 'Create product successfully!',
  });
};

const getAllProducts = async (req: Request, res: Response) => {
  const page = req.query.page ? Number(req.query.page) : undefined;
  const limit = req.query.limit ? Number(req.query.limit) : undefined;
  const keyword = req.query.q ? `%${req.query.q}%` : '%';

  if (page && limit) {
    if (!Number.isInteger(page) || !Number.isInteger(limit) || page < 1 || limit <= 0 || limit > 10) {
      return res.status(400).send({
        message: 'Invalid data!',
      });
    }

    const products = await prisma.product.findMany({
      skip: (page - 1) * limit,
      take: limit,
      where: {
        name: {
          contains: keyword,
        },
      },
      include: {
        colors: true,
        sizes: true,
      },
      orderBy: {
        name: 'asc',
      },
    });

    // const products = await prisma.product.groupBy({
    //   by: ['id'],
    //   skip: (page - 1) * limit,
    //   where: {
    //     name: {
    //       contains: keyword,
    //     },
    //   },
    //   orderBy: {
    //     // name: 'asc',
    //   },
    // });

    if (!products.length) {
      return res.status(404).send({
        message: 'No data!',
      });
    }

    return res.json(products);
  } else {
    const products = await prisma.product.findMany({
      where: {
        name: {
          contains: keyword,
        },
      },
      include: {
        colors: {
          include: {
            color: true,
          },
        },
        sizes: {
          include: {
            size: true,
          },
        },
      },
      orderBy: {
        name: 'asc',
      },
    });

    if (!products.length) {
      return res.status(404).send({
        message: 'No data!',
      });
    }

    return res.json(products);
  }
};

const getProductById = async (req: Request, res: Response) => {
  const { id } = req.params;

  if (!id) {
    return res.status(400).send({
      message: 'Invalid data!',
    });
  }

  const product = await prisma.product.findUnique({
    where: {
      id,
    },
  });

  if (!product) {
    return res.status(404).send({
      message: 'This product is not available!',
    });
  }

  res.json(product);
};

const updateProduct = async (req: Request, res: Response) => {
  const { id } = req.params;
  const { name, currentPrice, amount } = req.body;

  if (!id) {
    return res.status(400).send({
      message: 'Invalid data!',
    });
  }

  const product = await prisma.product.findUnique({
    where: {
      id,
    },
  });

  if (!product) {
    return res.status(404).send({
      message: 'This product is not found!',
    });
  }

  const updateProduct = await prisma.product.update({
    where: {
      id,
    },
    data: {
      name,
      currentPrice,
      amount,
    },
  });

  res.json(updateProduct);
};

const deleteProduct = async (req: Request, res: Response) => {
  const { id } = req.params;

  if (!id) {
    return res.status(400).send({
      message: 'Invalid data!',
    });
  }

  const product = await prisma.product.findUnique({
    where: {
      id,
    },
  });

  if (!product) {
    return res.status(404).send({
      message: 'This product is not found!',
    });
  }

  await prisma.product.delete({
    where: {
      id,
    },
  });

  res.send({
    message: 'Delete product successfully!',
  });
};